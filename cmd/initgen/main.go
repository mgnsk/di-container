// package initgen generates a

package main

import (
	"fmt"
	"os"
	"os/exec"
	"path"
	"path/filepath"

	"github.com/mgnsk/di-container/initgen"
	"github.com/moznion/gowrtr/generator"
)

func check(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	filename, err := filepath.Abs(filepath.Join(".", "initgen.go"))
	check(err)

	if _, err := os.Stat(filename); err != nil {
		panic(err)
	}

	// Package which is being generated.
	pkg := initgen.GetCurrentPkg()

	// First we generate the temporary generator wrapper which is run later.
	g := generator.NewRoot(
		generator.NewComment(" DO NOT EDIT. This code is generated by initgen."),
		generator.NewPackage("main"),
		generator.NewImport(pkg),
		generator.NewNewline(),
	)

	g = g.AddStatements(
		generator.NewFunc(
			nil,
			generator.NewFuncSignature("main"),
		).AddStatements(generator.NewRawStatement(path.Base(pkg) + ".Generate()")),
	).
		Gofmt("-s").
		Goimports()

	generated, err := g.Generate(0)
	check(err)

	dir := filepath.Join(filepath.Dir(filename), "tmp")

	os.RemoveAll(dir)

	check(os.Mkdir(dir, os.ModePerm))

	defer os.RemoveAll(dir)

	tmpFile := filepath.Join(dir, "initgen_build.go")

	out, err := os.OpenFile(tmpFile, os.O_RDWR|os.O_CREATE|os.O_TRUNC, 0666)
	check(err)

	_, err = fmt.Fprint(out, generated)
	check(err)
	check(out.Close())

	// Run the generator.
	res, err := exec.Command("go", "run", tmpFile).CombinedOutput()
	fmt.Println(string(res))
	check(err)
}
